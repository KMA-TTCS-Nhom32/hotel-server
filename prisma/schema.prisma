// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(cuid())
    email           String?           @unique
    phone           String?           @unique
    name            String
    avatar          Json?
    role            UserRole          @default(USER)
    birth_date      DateTime?
    gender          UserGender?
    verified_email  Boolean           @default(false)
    verified_phone  Boolean           @default(false)
    identifier_type AccountIdentifier @default(EMAIL)
    password        String
    is_blocked      Boolean           @default(false)
    deleted_at      DateTime?
    deleted_reason  String?
    is_active       Boolean           @default(true)
    reviews         Review[]
    bookings        Booking[]
    refreshTokens   RefreshToken[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    preferences     UserPreference[]
    loyalty_points  Int               @default(0)

    @@unique([email, phone])
}

enum AccountIdentifier {
    EMAIL
    PHONE
}

enum UserRole {
    USER
    STAFF
    ADMIN
}

enum UserGender {
    MALE
    FEMALE
}

model HotelBranch {
    id          String      @id @default(cuid())
    thumbnail   Json
    images      Json[]
    name        String
    description String
    phone       String
    is_active   Boolean     @default(true)
    address     String
    location    Json // location include latitude and longitude
    rooms       HotelRoom[]
    rating      Float?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    amenities   Amenity[]
}

model HotelRoom {
    id                      String             @id @default(cuid())
    name                    String
    description             String
    room_type               HotelRoomType
    bed_type                HotelRoomBedType
    status                  HotelRoomStatus
    base_price_per_hour     Float
    special_price_per_hour  Float?
    base_price_per_night    Float
    special_price_per_night Float?
    roomPriceHistories      RoomPriceHistory[]
    branchId                String
    branch                  HotelBranch        @relation(fields: [branchId], references: [id])
    bookings                Booking[]
    reviews                 Review[]
    amenities               Amenity[]
    max_adults              Int                @default(2)
    max_children            Int                @default(2)
    thumbnail               Json
    images                  Json[]
    quantity                Int                @default(1) // Number of rooms of this type
    promotions              RoomPromotion[]
    favorited_by            UserPreference[]   @relation("UserFavoriteRooms")
    createdAt               DateTime           @default(now())
    updatedAt               DateTime           @updatedAt
}

model Amenity {
    id        String        @id @default(cuid())
    name      String
    slug      String
    icon      Json? // Icon URL or code
    type      AmenityType
    rooms     HotelRoom[]
    branches  HotelBranch[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

enum AmenityType {
    ROOM // e.g., TV, minibar, safe
    PROPERTY // e.g., pool, gym, parking
    SERVICE // e.g., room service, laundry
}

enum HotelRoomBedType {
    SINGLE
    DOUBLE
    QUEEN
    KING
}

enum HotelRoomType {
    STANDARD
    SUPERIOR
    DELUXE
}

enum HotelRoomStatus {
    AVAILABLE
    BOOKED
    OCCUPIED
    MAINTENANCE
}

model Booking {
    id               String         @id @default(cuid())
    type             BookingType
    start_date       DateTime
    end_date         DateTime
    start_time       DateTime?
    end_time         DateTime?
    roomId           String
    room             HotelRoom      @relation(fields: [roomId], references: [id])
    total_amount     Float
    status           BookingStatus  @default(PENDING)
    cancel_reason    String?
    payment_method   PaymentMethod?
    number_of_guests Int
    special_requests String?
    check_in_time    DateTime?
    check_out_time   DateTime?
    payment_status   PaymentStatus  @default(UNPAID)
    payment_details  Json?
    userId           String
    user             User           @relation(fields: [userId], references: [id])
    guest_details    Json? // Store additional guest information
    is_business_trip Boolean        @default(false)
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
}

enum BookingType {
    HOURLY
    NIGHTLY
}

model Review {
    id                  String    @id @default(cuid())
    rating_services     Int       @default(0)
    rating_cleanliness  Int       @default(0)
    rating_comfort      Int       @default(0)
    is_anonymous_review Boolean   @default(false)
    comment             String?
    roomId              String
    room                HotelRoom @relation(fields: [roomId], references: [id])
    userId              String
    user                User      @relation(fields: [userId], references: [id])
    createdAt           DateTime  @default(now())
}

enum BookingStatus {
    PENDING
    WAITING_FOR_CHECK_IN
    CHECKED_IN
    CANCELLED
    COMPLETED
    REFUNDED
    REJECTED
}

enum PaymentStatus {
    UNPAID
    PAID
    FAILED
    REFUNDED
}

enum PaymentMethod {
    CASH
    BANKING
    ZALOPAY
    MOMO
    VN_PAY
}

model RoomPriceHistory {
    id             String        @id @default(cuid())
    roomId         String
    room           HotelRoom     @relation(fields: [roomId], references: [id])
    price_type     RoomPriceType
    price          Float
    effective_from DateTime
    effective_to   DateTime?
    createdAt      DateTime      @default(now())
}

enum RoomPriceType {
    PER_HOUR
    PER_NIGHT
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    device    String? // Store device info
    ip        String? // Store IP address
    isRevoked Boolean  @default(false)
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([expiresAt])
    @@index([isRevoked])
    @@index([createdAt])
}

model RoomPromotion {
    id             String       @id @default(cuid())
    code           String       @unique
    discount_type  DiscountType
    discount_value Float
    start_date     DateTime
    end_date       DateTime
    min_nights     Int?
    rooms          HotelRoom[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

enum DiscountType {
    PERCENTAGE
    FIXED_AMOUNT
}

model UserPreference {
    id                       String         @id @default(cuid())
    userId                   String
    user                     User           @relation(fields: [userId], references: [id])
    favorite_rooms           HotelRoom[]    @relation("UserFavoriteRooms")
    preferred_payment_method PaymentMethod?
    special_requirements     String?
    createdAt                DateTime       @default(now())
    updatedAt                DateTime       @updatedAt
}
