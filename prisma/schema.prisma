// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(cuid())
    email           String?           @unique
    phone           String?           @unique
    name            String
    avatar          Json?
    role            UserRole          @default(USER)
    birth_date      DateTime?
    gender          UserGender?
    verified_email  Boolean           @default(false)
    verified_phone  Boolean           @default(false)
    identifier_type AccountIdentifier @default(EMAIL)
    password        String
    is_blocked      Boolean           @default(false)
    deleted_at      DateTime?
    deleted_reason  String?
    is_active       Boolean           @default(true)
    reviews         Review[]
    bookings        Booking[]
    refreshTokens   RefreshToken[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    preferences     UserPreference[]
    loyalty_points  Int               @default(0)
    verification    Verification[]

    @@unique([email, phone])
}

enum AccountIdentifier {
    EMAIL
    PHONE
}

enum UserRole {
    USER
    STAFF
    ADMIN
}

enum UserGender {
    MALE
    FEMALE
}

model Province {
    id        String        @id @default(cuid())
    name      String
    zip_code  String
    slug      String
    branches  HotelBranch[]
    isDeleted Boolean       @default(false)
    deletedAt DateTime?
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@unique([name, zip_code, slug])
}

model HotelBranch {
    id          String       @id @default(cuid())
    thumbnail   Json
    images      Json[]
    name        String
    slug        String
    description String
    phone       String
    is_active   Boolean      @default(true)
    address     String
    location    Json?        @default("{ \"latitude\": \"0\", \"longitude\": \"0\" }")
    provinceId  String
    province    Province     @relation(fields: [provinceId], references: [id])
    rating      Float?
    nearBy      Json[]       @default([])
    isDeleted   Boolean      @default(false)
    deletedAt   DateTime?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    amenities   Amenity[]
    rooms       RoomDetail[]
}

model HotelRoom {
    id           String           @id @default(cuid())
    name         String
    slug         String
    status       HotelRoomStatus
    detailId     String
    detail       RoomDetail       @relation(fields: [detailId], references: [id])
    bookings     Booking[]
    reviews      Review[]
    favorited_by UserPreference[] @relation("UserFavoriteRooms")
    isDeleted    Boolean          @default(false)
    deletedAt    DateTime?
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
}

model RoomDetail {
    id                      String             @id @default(cuid())
    name                    String
    slug                    String
    description             String
    branchId                String
    branch                  HotelBranch        @relation(fields: [branchId], references: [id])
    thumbnail               Json
    images                  Json[]
    room_type               HotelRoomType
    bed_type                HotelRoomBedType
    area                    Int
    amenities               Amenity[]
    base_price_per_hour     Decimal            @db.Decimal(9, 0)
    special_price_per_hour  Decimal?           @db.Decimal(9, 0)
    base_price_per_night    Decimal            @db.Decimal(9, 0)
    special_price_per_night Decimal?           @db.Decimal(9, 0)
    base_price_per_day      Decimal            @db.Decimal(9, 0)
    special_price_per_day   Decimal?           @db.Decimal(9, 0)
    roomPriceHistories      RoomPriceHistory[]
    promotions              RoomPromotion[]
    max_adults              Int                @default(2)
    max_children            Int                @default(2)
    quantity                Int                @default(1)
    flat_rooms              HotelRoom[]
    is_available            Boolean            @default(false)
    rating                  Float?
    isDeleted               Boolean            @default(false)
    deletedAt               DateTime?
    createdAt               DateTime           @default(now())
    updatedAt               DateTime           @updatedAt
}

model Amenity {
    id        String        @id @default(cuid())
    name      String
    slug      String
    icon      Json // Icon URL or code
    type      AmenityType
    rooms     RoomDetail[]
    branches  HotelBranch[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

enum AmenityType {
    ROOM // e.g., TV, minibar, safe
    PROPERTY // e.g., pool, gym, parking
    SERVICE // e.g., room service, laundry
}

enum HotelRoomBedType {
    SINGLE
    DOUBLE
    QUEEN
    KING
}

enum HotelRoomType {
    STANDARD
    SUPERIOR
    DELUXE
}

enum HotelRoomStatus {
    AVAILABLE
    BOOKED
    OCCUPIED
    MAINTENANCE
}

model Booking {
    id               String            @id @default(cuid())
    code             String            @unique
    type             BookingType
    create_type      BookingCreateType
    start_date       DateTime
    end_date         DateTime
    start_time       String?
    end_time         String?
    roomId           String
    room             HotelRoom         @relation(fields: [roomId], references: [id])
    promotion_code   String?
    total_amount     Decimal           @db.Decimal(9, 0)
    status           BookingStatus     @default(PENDING)
    cancel_reason    String?
    payment_method   PaymentMethod?
    number_of_guests Int
    adults           Int               @default(1)
    children         Int               @default(0)
    infants          Int               @default(0)
    special_requests String?
    check_in_time    DateTime?
    check_out_time   DateTime?
    payment_status   PaymentStatus     @default(UNPAID)
    payment_details  Json?
    refund_details   Json?
    userId           String
    user             User              @relation(fields: [userId], references: [id])
    guest_details    Json? // Store additional guest information
    is_business_trip Boolean           @default(false)
    isDeleted        Boolean           @default(false)
    deletedAt        DateTime?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

enum BookingType {
    HOURLY
    NIGHTLY
    DAILY
}

enum BookingCreateType {
    ONLINE_BOOKING
    AT_HOTEL
}

model Review {
    id                  String    @id @default(cuid())
    rating_services     Int
    rating_cleanliness  Int
    rating_comfort      Int
    is_anonymous_review Boolean   @default(false)
    comment             String?
    roomId              String
    room                HotelRoom @relation(fields: [roomId], references: [id])
    userId              String
    user                User      @relation(fields: [userId], references: [id])
    createdAt           DateTime  @default(now())
}

enum BookingStatus {
    PENDING
    WAITING_FOR_CHECK_IN
    CHECKED_IN
    CANCELLED
    COMPLETED
    REFUNDED
    REJECTED
}

enum PaymentStatus {
    UNPAID
    PAID
    FAILED
    REFUNDED
}

enum PaymentMethod {
    CASH
    BANKING
    ZALOPAY
    MOMO
    VN_PAY
    VIET_QR
}

model RoomPriceHistory {
    id              String     @id @default(cuid())
    name            String
    description     String     @default("")
    roomDetailId    String
    roomDetail      RoomDetail @relation(fields: [roomDetailId], references: [id])
    price_per_hour  Decimal?   @db.Decimal(9, 0)
    price_per_night Decimal?   @db.Decimal(9, 0)
    price_per_day   Decimal?   @db.Decimal(9, 0)
    effective_from  String
    effective_to    String?
    is_applied      Boolean    @default(false)
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
}

enum RoomPriceType {
    PER_HOUR
    PER_NIGHT
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    device    String? // Store device info
    ip        String? // Store IP address
    isRevoked Boolean  @default(false)
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([expiresAt])
    @@index([isRevoked])
    @@index([createdAt])
}

model RoomPromotion {
    id             String       @id @default(cuid())
    code           String       @unique
    applied_type   BookingType
    discount_type  DiscountType
    discount_value Float
    start_date     DateTime
    end_date       DateTime
    min_hours      Int?
    min_nights     Int?
    min_days       Int?
    applied_rooms  RoomDetail[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

enum DiscountType {
    PERCENTAGE
    FIXED_AMOUNT
}

model UserPreference {
    id                       String         @id @default(cuid())
    userId                   String
    user                     User           @relation(fields: [userId], references: [id])
    favorite_rooms           HotelRoom[]    @relation("UserFavoriteRooms")
    preferred_payment_method PaymentMethod?
    special_requirements     String?
    createdAt                DateTime       @default(now())
    updatedAt                DateTime       @updatedAt
}

model Verification {
    id         String            @id @default(cuid())
    code       String
    type       AccountIdentifier
    userId     String
    user       User              @relation(fields: [userId], references: [id])
    expires_at DateTime
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt

    @@index([userId])
    @@index([code])
}
